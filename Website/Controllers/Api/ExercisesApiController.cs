using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web;
using System.Web.Http;
using System.Web.Configuration;
using Dapper;
using System.Xml.Linq;
using System.Threading;
using System.Text;
using Runnymede.Website.Utils;
using Runnymede.Website.Models;
using Microsoft.AspNet.Identity;
using Microsoft.WindowsAzure.Storage.Table;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;

namespace Runnymede.Website.Controllers.Api
{
    [Authorize]
    [HostAuthentication(DefaultAuthenticationTypes.ApplicationCookie)]
    [RoutePrefix("api/ExercisesApi")]
    public class ExercisesApiController : ApiController
    {

        // GET api/ExercisesApi/GetExercises?offset=0&limit=10 
        public DataSourceDto<ExerciseDto> GetExercises(int offset, int limit)
        {
            var result = new DataSourceDto<ExerciseDto>();

            DapperHelper.QueryMultipleResiliently(
                "dbo.exeGetExercises",
                new
                {
                    UserId = this.GetUserId(),
                    RowOffset = offset,
                    RowLimit = limit
                },
                CommandType.StoredProcedure,
                (Dapper.SqlMapper.GridReader reader) =>
                {
                    result.TotalCount = reader.Read<int>().Single();
                    result.Items = reader.Map<ExerciseDto, ReviewDto, int>(e => e.Id, r => r.ExerciseId, (e, r) => { e.Reviews = r; });
                });

            return result;
        }

        // GET /api/ExercisesApi/12345/ReviewConditions
        [Route("{id:int}/ReviewConditions")]
        public async Task<IHttpActionResult> GetReviewConditions(int id)
        {
            var sqlConditions = @"
select dbo.accGetBalance(@UserId) as Balance, dbo.appGetConstantAsFloat('Exercises.Reviews.WorkDurationRatio') as WorkDurationRatio;
";
            var sqlTeachers = @"
select Id, DisplayName, ReviewRate 
from dbo.relGetTeachers(@UserId) 
order by DisplayName;
";
            var userId = this.GetUserId();
            dynamic conditions;
            IEnumerable<dynamic> teachers;

            using (var connection = DapperHelper.GetOpenConnection())
            {
                conditions = (await connection.QueryAsync<dynamic>(sqlConditions, new { UserId = userId })).Single();

                teachers = await connection.QueryAsync<dynamic>(sqlTeachers, new { UserId = userId });
            }

            return Ok<object>(new
            {
                WorkDurationRatio = (float)conditions.WorkDurationRatio, // Average ratio of work duration to exercise length. It is used for calculation of suggested offers.
                Balance = (decimal)conditions.Balance,
                Teachers = teachers
            });
        }

        // PUT /api/ExercisesApi/12345/Title
        [Route("{id:int}/Title")]
        public IHttpActionResult PutTitle(int id, [FromBody]JObject value)
        {
            var sql = @"
update dbo.exeExercises set Title = @Title where Id = @Id and UserId = @UserId;
";
            var rowsAffected = DapperHelper.ExecuteResiliently(sql, new
            {
                Title = (string)value["title"],
                Id = id,
                UserId = this.GetUserId()
            });
            return StatusCode(rowsAffected > 0 ? HttpStatusCode.NoContent : HttpStatusCode.BadRequest);
        }

        //
        [HostAuthentication(DefaultAuthenticationTypes.ExternalBearer)]
        [Route("SaveTopic")]
        public IHttpActionResult SaveTopic(ExerciseSaveTopicModel model)
        {
            var type = string.IsNullOrEmpty(model.Type) ? null : model.Type;
            var title = string.IsNullOrEmpty(model.Title) ? null : model.Title;
            var lines = (model.Lines != null && model.Lines.Any()) ? model.Lines.ToList() : null;

            // Generate Id as a product of the contents.
            // Concatenate the lines.
            // Azure table replaces \r\n with \n when returns string over HTML. Details of that are unclear.
            var allLines = lines != null ? string.Join("\n", lines) : null;

            // A sequence generated by Random is determined by the seed. We need not a trully random ExtId, but a determined and repeatable one based on the contents, a kind of hash.
            var seed1 = ((type ?? "") + (title ?? "") + (allLines ?? "")).GetHashCode();
            var seed2 = ((allLines ?? "") + (title ?? "")).GetHashCode();
            var hashingRandoms = new[] { new Random(seed1), new Random(seed2) };
            var id = LoggingUtils.GetBase32Number(8, hashingRandoms);

            var partitionKey = id;
            var rowKey = title;

            // Find the topic if it already exists.
            var table = AzureStorageUtils.GetCloudTable(AzureStorageUtils.TableNames.Topics);
            // Prevent exception if not found
            table.ServiceClient.GetTableServiceContext().IgnoreResourceNotFoundException = true;
            var retrieveOperation = TableOperation.Retrieve<TableEntity>(partitionKey, rowKey);
            var tableResult = table.Execute(retrieveOperation);

            // Write if not exists.
            if (tableResult.Result == null)
            {
                var entity = new TopicEntity
                {
                    PartitionKey = partitionKey,
                    RowKey = rowKey,
                    Type = type,
                    Lines = allLines,
                };
                AzureStorageUtils.InsertEntry(AzureStorageUtils.TableNames.Topics, entity);
            }

            return Ok<object>(new { Id = id });
        }


    }
}